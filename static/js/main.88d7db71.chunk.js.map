{"version":3,"sources":["Nav/styles.js","Nav/Slider/Slider.js","Nav/Menu/Menu.js","Nav/Nav.js","Sidebar/Controls/Controls.js","Sidebar/VirtualizedList/Styles.js","Sidebar/VirtualizedList/VirtualizedList.js","Sidebar/Sidebar.js","Visualizer/Items/Item/styles.js","Visualizer/Items/Item/Item.js","Visualizer/styles.js","Visualizer/Visualizer.js","Algorithims/Helpers/Compiler.js","Algorithims/BubbleSort.js","Algorithims/SelectionSort.js","Algorithims/InsertionSort.js","Algorithims/MergeSort.js","Algorithims/Helpers/Interpreter.js","SortingVisualizer.js","App.js","index.js"],"names":["styles","s","root","flexGrow","appbar","zIndex","title","useStyles","makeStyles","width","input","color","green","slider","React","memo","props","classes","useState","default","value","setValue","className","Typography","id","gutterBottom","text","Grid","container","spacing","item","xs","Slider","onChange","event","newValue","aria-labelledby","Input","margin","target","Number","onBlur","inputProps","step","min","max","type","theme","maxWidth","options","anchorEl","setAnchorEl","selectedIndex","setSelectedIndex","List","component","aria-label","ListItem","button","aria-haspopup","aria-controls","onClick","currentTarget","ListItemText","primary","secondary","Menu","keepMounted","open","Boolean","onClose","map","option","index","MenuItem","key","selected","updateMethod","handleMenuItemClick","Nav","AppBar","position","Toolbar","variant","Button","sort","finishedSorting","isSorting","m","sortMethodSelector","setSize","withStyles","Controls","toggleSort","ListItemIcon","style","yellow","red","goBackOneInstruction","nextInstruction","verticalAlign","transition","backgroundColor","ExampleWrapper","goToInstruction","Row","data","instruction","Paper","areEqual","state","ref","createRef","this","current","scrollToItem","height","itemCount","instructions","length","itemData","items","itemSize","PureComponent","display","hide","drawer","flexShrink","whiteSpace","toolbar","alignItems","justifyContent","padding","mixins","drawerOpen","top","transitions","create","easing","sharp","duration","enteringScreen","drawerClose","leavingScreen","overflowX","breakpoints","up","content","setOpen","CssBaseline","Drawer","clsx","paper","IconButton","Divider","direction","orientation","border","background","Item","child","justify","array","val","grey","pointerA","cyan","pointerB","lightGreen","Swap","x","y","MovePointer","p","BubbleSort","Arr","ArrCopy","Instructions","i","j","push","t","SelectionSort","arr","arrCopy","temp","InsertionSort","MergeSort","msort","pos","Math","floor","merge","slice","a","b","from","to","localPos","out","instructionHandler","pointers","startsWith","split","temporary","parseInt","console","log","SortingVisualizer","setArray","setState","clearInterval","intervalID","instructionLoop","newArr","Array","arraySize","random","savedArray","setInstructions","setArraySize","async","method","ptrs","c","goForwardOneInstruction","speed","instructionHandlerLoop","bind","setInterval","Component","App","Fragment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.88d7db71.chunk.js","sourcesContent":["const styles = s => ({\n    root: {\n        flexGrow: \"1\"\n      },\n      appbar: {\n        zIndex: 3,\n      },\n  title: {\n    flexGrow: \"1\"\n  },\n});\n\nexport default styles;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\nimport green from '@material-ui/core/colors/green';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,    \n  },\n  input: {\n    width: 42,\n    color: green[500]\n  },\n  slider: {\n    color: green[500]\n  }\n});\n\nexport default React.memo(function InputSlider(props) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(props.default);\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n    props.setValue(newValue);\n  };\n\n  const handleInputChange = event => {\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      setValue(0);\n    } else if (value > 180) {\n      setValue(180);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Typography id=\"input-slider\" gutterBottom>\n        {props.text}\n      </Typography>\n      <Grid container spacing={1} >\n        <Grid item xs>\n          <Slider\n            value={typeof value === 'number' ? value : 0}\n            onChange={handleSliderChange}\n            className={classes.slider}\n            aria-labelledby=\"input-slider\"\n          />\n        </Grid>\n        <Grid item>\n          <Input\n            className={classes.input}\n            value={value}\n            margin=\"dense\"\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: 20,\n              min: 0,\n              max: 180,\n              type: 'number',\n              'aria-labelledby': 'input-slider',\n            }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n});","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 150,\n    // secondary: red[500]\n  },\n}));\n\nconst options = [\n  'Merge Sort',\n  'Bubble Sort',\n  'Insertion Sort',\n  'Selection Sort',\n];\n\nexport default React.memo(function SimpleListMenu(props) {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n  const handleClickListItem = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (event, index) => {\n    setSelectedIndex(index);\n    props.updateMethod(options[index]);\n    setAnchorEl(null);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div className={classes.root}>\n      <List component=\"nav\" aria-label=\"Device settings\">\n        <ListItem\n          button\n          aria-haspopup=\"true\"\n          aria-controls=\"lock-menu\"\n          aria-label=\"Sorting Method\"\n          onClick={handleClickListItem}\n        >\n          <ListItemText primary={options[selectedIndex]} secondary=\"Sorting Method\" />\n        </ListItem>\n      </List>\n      <Menu\n        id=\"lock-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {options.map((option, index) => (\n          <MenuItem\n            key={option}\n            selected={index === selectedIndex}\n            onClick={event => handleMenuItemClick(event, index)}\n          >\n            {option}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n});","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from \"./styles\";\nimport Slider from \"./Slider/Slider\";\nimport Menu from \"./Menu/Menu\";\n\nimport Button from '@material-ui/core/Button';\n\nconst Nav = React.memo(function Nav(props) {\n\n    const {classes} = props;\n    return (\n      <nav>\n        <AppBar position=\"static\" className={classes.appbar}>\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              Sorting Visualzier\n            </Typography>\n            <Button variant=\"contained\" onClick={props.sort}>{props.finishedSorting ? \"Create New Array\" : props.isSorting ? \"Stop Sorting\" : \"Start Sorting\" }</Button>\n            <Menu \n            updateMethod={(m) => {props.sortMethodSelector(m)}}/>\n            <Slider \n            text=\"Size of Array\"\n            setValue={props.setSize}\n            default={30}/>\n          </Toolbar>\n          \n        </AppBar>\n      </nav>\n      \n    );\n  });\n\n\n\n\nexport default withStyles(styles)(Nav);\n","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport green from '@material-ui/core/colors/green';\nimport yellow from '@material-ui/core/colors/yellow';\nimport red from '@material-ui/core/colors/red';\n\nconst Controls = React.memo(function Controls(props) {\n    \n        return (\n            <List>\n                <ListItem button key={\"Start\"} onClick={props.toggleSort}>\n                    <ListItemIcon>{ props.finishedSorting ? <ReplayIcon style={{color: yellow[800]}} /> : props.isSorting ? <PauseIcon style={{color: red[500]}}/> : <PlayArrowIcon style={{color: green[500]}} />} </ListItemIcon>\n                </ListItem>\n                    <ListItem button key={\"Up\"} onClick={props.goBackOneInstruction} >\n                    <ListItemIcon><KeyboardArrowUpIcon/></ListItemIcon>\n                </ListItem>\n                    <ListItem button key={\"Down\"} onClick={props.nextInstruction}>\n                    <ListItemIcon><KeyboardArrowDownIcon/></ListItemIcon>\n                </ListItem>\n            </List>\n        );\n    });\n\nexport default Controls","\nconst styles = s => ({\n    root: {\n        verticalAlign:'middle',\n        transition: 'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n        '&:hover': {\n         backgroundColor: 'rgba(0, 0, 0, 0.08)',\n       }\n    },\n    selected: {\n\n        backgroundColor: 'rgba(76, 175, 80, 0.3)',\n    }   \n    \n});\n  \n\nexport default styles;","import React, { PureComponent, memo } from 'react';\nimport { FixedSizeList as List, areEqual } from 'react-window';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from \"./Styles\";\n\nclass ExampleWrapper extends PureComponent {\n\n  constructor() {\n    super();\n    this.state = {\n      ref: React.createRef(),\n    }\n  }\n\n  componentDidMount() {\n    this.state.ref.current.scrollToItem(this.props.instruction, \"start\");\n  }\n\n  componentDidUpdate() {\n    this.state.ref.current.scrollToItem(this.props.instruction, \"start\");\n  }\n\n  render() {\n    return (\n      <List\n        ref={this.state.ref}\n        height={350}\n        itemCount={this.props.instructions.length}\n        itemData={{items:this.props.instructions, instruction: this.props.instruction}}\n        itemSize={48}\n        width={290}\n        \n      >\n        {this.Row}\n      </List>\n    );\n  }\n\n  goToInstruction = (event, index) => {\n    this.props.goToInstruction(index);\n  }\n\n// If list items are expensive to render,\n// Consider using PureComponent to avoid unnecessary re-renders.\n// https://reactjs.org/docs/react-api.html#reactpurecomponent\n   Row = memo(({ data, index, style }) => {\n  // Data passed to List as \"itemData\" is available as props.data\n    const instruction = data[\"instruction\"]\n    const item = data[\"items\"][index]\n\n    return (\n      <Paper>\n        <div style={style} onClick={event => this.goToInstruction(event,index)} className={index === instruction ? this.props.classes.selected : this.props.classes.root}>\n          {item}\n        </div>\n      </Paper>\n    );\n  }, areEqual);\n}\nexport default withStyles(styles)(ExampleWrapper);","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Grid from '@material-ui/core/Grid';\nimport Controls from './Controls/Controls';\nimport ExampleWrapper from './VirtualizedList/VirtualizedList';\n\nconst drawerWidth = 380;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    \n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    height: 'auto',\n    flexShrink: 0,\n    zIndex:  1,\n    width: drawerWidth,\n    whiteSpace: 'nowrap',\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    ...theme.mixins.toolbar,\n  },\n  drawerOpen: {\n    top: 300,\n    height: 'auto',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  transition: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    top: 300,\n    height: 'auto',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(4) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(7) + 1,\n    },\n  },\n  content: {\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default React.memo(function Sidebar(props) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n\n  const toggle = () => {\n    if(open){\n      setOpen(false);\n    } else {\n      setOpen(true);\n    }\n  }\n\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n      >\n          <div className={classes.toolbar}>\n          <IconButton onClick={toggle}>\n            {!open ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n          </IconButton>\n          </div>\n        <Divider />\n        {open ? (\n          <Grid\n          className={clsx(classes.transition)}\n          container\n          direction=\"row\">\n\n            <Grid item>\n            <Controls \n            nextInstruction={props.nextInstruction}\n            toggleSort={props.toggleSort}\n            isSorting={props.isSorting}\n            finishedSorting={props.finishedSorting}\n            goBackOneInstruction={props.goBackOneInstruction}/>\n            \n            </Grid>\n\n            <Grid item>\n            <Divider orientation=\"vertical\" />\n            </Grid>\n\n            <Grid \n            \n            item>\n              <ExampleWrapper\n              \n              instructions={props.instructions}\n              instruction={props.instruction}\n              goToInstruction={props.goToInstruction}/>\n            </Grid>\n          </Grid>\n        ) : (\n          <Controls \n          nextInstruction={props.nextInstruction}\n          toggleSort={props.toggleSort}\n          isSorting={props.isSorting}\n          finishedSorting={props.finishedSorting}\n          goBackOneInstruction={props.goBackOneInstruction}/>\n        )}\n        \n      </Drawer>\n    </div>\n  );\n          });\n          ","\nconst styles = s => ({\n    item:{\n        border:1,\n        width: props => props.width/2,\n        margin:2,\n        height:props => props.height*5,\n        background: props => props.color,\n    }\n});\n\nexport default styles;\n","import React from 'react';\nimport styles from \"./styles\";\nimport { withStyles } from '@material-ui/core/styles';\n\n\n\nconst Item = React.memo((props) => (\n    <div className={props.classes.item}></div>\n  ));\n\nexport default withStyles(styles)(Item);","const styles = s => ({\n    root: {\n      height: '80vh',\n    },\n    child: {\n      // margin: 200\n    }\n});\n\nexport default styles;","import React from 'react';\nimport Item from './Items/Item/Item';\nimport Grid from '@material-ui/core/Grid';\nimport grey from \"@material-ui/core/colors/grey\";\nimport cyan from '@material-ui/core/colors/cyan';\nimport lightGreen from '@material-ui/core/colors/lightGreen';\nimport styles from './styles';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst Visualizer = (props) => (\n    <Grid\n                    className={props.classes.root}\n                    container\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    spacing={4}\n                    >\n                    \n                    {\n                    props.array.map((val, index) => {\n                        let color = grey[500];\n                        if (index === props.pointerA) {\n                            color = cyan[\"A200\"];\n                        } else if (index === props.pointerB) {\n                            color = lightGreen[\"A400\"];\n                        }\n                        return (\n                            \n                            \n                            <Item\n                            key={index}\n                            height={val}\n                            width={10}\n                            color={color}/>\n                            \n                        );\n                    })\n                }\n                </Grid>  \n);\n\n\nexport default withStyles(styles)(Visualizer);","const Swap = (x,y) => {\n    return `swap ${x} ${y}`;\n};\n\nconst End = () => {\n    return \"end\";\n};\n\nconst MovePointer = (p, x) => {\n    return `movepointer ${p} ${x}`;\n};\n\nconst Slide = (from, to) => {\n    return `slide ${from} ${to}`;\n}\n\nexport {Swap, End, MovePointer, Slide};","import { Swap, End, MovePointer } from \"./Helpers/Compiler\";\n\nconst BubbleSort = (Arr) => {\n    let ArrCopy = [...Arr];\n    let Instructions = [];\n    for(let i = ArrCopy.length; i > -1; i--) {\n        \n        for(let j = 0; j < i-1; j++) {\n            \n            if(ArrCopy[j] > ArrCopy[j+1]) {\n                Instructions.push(MovePointer(\"a\", j));\n                Instructions.push(MovePointer(\"b\", j+1));\n                Instructions.push(Swap(j+1,j));\n                let t = ArrCopy[j+1];\n                ArrCopy[j+1] = ArrCopy[j];\n                ArrCopy[j] = t;\n            }\n        }\n    }\n    Instructions.push(End());\n    return Instructions;\n}\n\n// const BubbleSortNoInstructions = (arr) => {\n//     let arrCopy = [...arr];\n//     for(let i = 0; i < arrCopy.length; i++) {\n//         for(let j = i + 1; j < arrCopy.length; j++) {\n//             if(arrCopy[j] < arrCopy[i]) {\n//                 let t = arrCopy[j];\n//                 arrCopy[j] = arrCopy[i];\n//                 arrCopy[i] = t;\n//             }\n//         }\n//     }\n//     return arrCopy;\n// }\n\nexport default BubbleSort;","import { Swap, End, MovePointer } from './Helpers/Compiler';\n\nconst SelectionSort = (arr) => {\n    const Instructions = [];\n    const arrCopy = [...arr];\n    for(let i = 0; i < arrCopy.length; i++){\n        \n        let min = arrCopy[i];\n        let index = i;\n        for(let j = i+1; j<arrCopy.length; j++){\n            \n            Instructions.push(MovePointer(\"b\",j));\n            if(arrCopy[j] < min) {\n                Instructions.push(MovePointer(\"a\",j));\n                min = arrCopy[j];\n                index = j;\n            }\n        }\n        if(index !== i ){\n            Instructions.push(Swap(i,index));\n            let temp = arrCopy[i];\n            arrCopy[i] = min;\n            arrCopy[index] = temp;\n        }\n    }\n    Instructions.push(End());\n    return Instructions;\n}\n\nexport { SelectionSort };","import { Swap, End, MovePointer } from './Helpers/Compiler';\n\nconst InsertionSort = (arr) => {\n    const Instructions = [];\n    const arrCopy = [...arr];\n    for(let i = 0; i < arrCopy.length - 1; i++){\n        Instructions.push(MovePointer(\"a\",i));\n        let j = i + 1;\n        while(j > 0) {\n            Instructions.push(MovePointer(\"b\",j));\n            if(arrCopy[j] < arrCopy[j-1]) {\n                Instructions.push(Swap(j-1,j));\n                let temp = arrCopy[j-1];\n                arrCopy[j-1] = arrCopy[j];\n                arrCopy[j] = temp;\n                j--;\n            } else {\n                break;\n            }\n        }\n    }\n    Instructions.push(End());\n    return Instructions;\n}\n\nexport { InsertionSort };","import { End, MovePointer, Slide } from './Helpers/Compiler';\nconst MergeSort = (arr) => {\n    let Instructions = [];\n    msort([...arr], Instructions, 0);\n    Instructions.push(End());\n\n    return Instructions;\n}\nconst msort = (arr, Instructions, pos) => {\n    if(arr.length <= 1) {\n        return arr;\n    }\n\n    let m = Math.floor(arr.length / 2);\n\n    return merge(msort(arr.slice(0,m), Instructions, pos), msort(arr.slice(m), Instructions, pos+m), Instructions, pos);\n}\n\nconst merge = (a, b, Instructions, pos) => {\n    let i = 0;\n    let j = 0;\n    let localPos = 0;\n    let out = [];\n\n    while(i < a.length || j < b.length) {\n        if(j > b.length - 1 || a[i] <= b[j]) {\n            Instructions.push(MovePointer(\"a\",pos+i));\n            out.push(a[i]);\n            localPos++;\n            i++;\n        } else { \n\n            Instructions.push(MovePointer(\"a\",pos+i));\n            Instructions.push(MovePointer(\"b\",pos+j+a.length));\n            Instructions.push(Slide(pos+j+a.length, pos+localPos))\n            localPos++;\n            out.push(b[j]);\n            j++;\n        } \n    }\n    \n    return out;\n}\n\nexport { MergeSort };","const instructionHandler = (instruction, arr, pointers) => {\n\n    if(instruction.startsWith(\"swap\")) {\n        let split = instruction.split(\" \");\n        let temporary = arr[split[1]];\n        arr[split[1]] = arr[split[2]];\n        arr[split[2]] = temporary;\n        return [arr, pointers]\n    } else if(instruction.startsWith(\"movepointer\")) {\n        let split = instruction.split(\" \");\n        pointers[split[1]] = parseInt(split[2]);\n        return [arr, pointers]\n    } else if(instruction.startsWith(\"end\")) {\n        \n    } else if(instruction.startsWith(\"slide\")) {\n        let split = instruction.split(\" \");\n        let from = split[1];\n        let to = split[2];\n        if(from === to) {\n            return [arr, pointers];\n        } else {\n            let a = [...arr.slice(0,to), arr[from], ...arr.slice(parseInt(to),from), ...arr.slice(parseInt(from)+1)]\n            return [a, pointers];\n        }\n        \n    } else {\n        console.log(\"instruction invalid\");\n    }\n}\n\n\nexport { instructionHandler };","import React from 'react';\nimport Nav from './Nav/Nav'\nimport Sidebar from './Sidebar/Sidebar';\nimport Visualizer from './Visualizer/Visualizer';\n\n\nimport { BubbleSort, SelectionSort, InsertionSort, MergeSort, instructionHandler } from './Algorithims/Algorithims';\n\nclass SortingVisualizer extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            arraySize: 50,\n            savedArray: [],\n            array: Array.from({length: 50}, () => Math.floor(Math.random() * 50)+1),\n            speed: 1,\n            isSorting: false,\n            instruction: 0,\n            finishedSorting: false,\n            pointerA: 0,\n            pointerB: 1,\n            instructions: [],\n            intervalID:0,\n            method: \"Merge Sort\",\n        };\n        this.instructionHandlerLoop = this.instructionHandlerLoop.bind(this);\n        \n    }\n\n    componentDidMount() {\n        this.setInstructions();\n        this.setState({savedArray: this.state.array});\n    }\n\n    render() {\n        return(\n            <div className=\"SortingVisualizer\">\n                <Nav \n                sortMethodSelector={this.sortMethodSelector}\n                sort={this.toggleSort}\n                setSize={this.setArraySize}\n                isSorting={this.isSorting}\n                finishedSorting={this.finishedSorting}/>\n                <Visualizer\n                arraySize={this.state.arraySize}\n                array={this.state.array}\n                pointerA={this.state.pointerA}\n                pointerB={this.state.pointerB}/>\n                <Sidebar\n                instructions={this.state.instructions} \n                instruction={this.state.instruction}\n                toggleSort={this.toggleSort}\n                isSorting={this.state.isSorting}\n                nextInstruction={this.goForwardOneInstruction}\n                finishedSorting={this.state.finishedSorting}\n                goToInstruction={this.goToInstruction}\n                goBackOneInstruction={this.goBackOneInstruction}/>\n            </div>  \n        );\n    }\n\n    toggleSort = () => {\n        if(!this.state.isSorting && !this.state.finishedSorting) {\n            this.setState({isSorting: true});\n            this.instructionLoop();\n        } else if(this.state.finishedSorting) {\n            this.setArray();\n            this.setState({finishedSorting: false});\n        }  else {\n            this.setState({isSorting: false});\n            clearInterval(this.state.intervalID);\n        }\n    }\n\n    setArray = () => {\n        let newArr = Array.from({length: this.state.arraySize}, () => Math.floor(Math.random() * this.state.arraySize)+1);\n        this.setState({array: newArr, savedArray: newArr, finishedSorting: false, isSorting: false, pointerA: 0, pointerB: 1}, this.setInstructions);\n    }\n\n    setArraySize = (s) => {\n        if(s !== this.state.arraySize && !this.state.isSorting) {\n            this.setState({arraySize: s}, this.setArray);\n        }\n    }\n\n    sortMethodSelector = async (m) => {\n        if (this.state.method !== m) {\n            this.setState({method:m, instruction:0});\n            this.setArray();\n        }\n    }   \n\n    setInstructions = () => {\n        let arr = [];\n        if(this.state.method === \"Bubble Sort\") {\n            arr = BubbleSort(this.state.array)\n        } else if(this.state.method === \"Selection Sort\") {\n            arr = SelectionSort(this.state.array)\n        } else if(this.state.method === \"Insertion Sort\") {\n            arr = InsertionSort(this.state.array)\n        } else if(this.state.method === \"Merge Sort\") {\n            arr = MergeSort(this.state.array)\n        }\n        this.setState({instructions: arr, instruction: 0});\n    }\n\n    instructionLoop() {\n        this.setState({intervalID: setInterval(() => {\n                this.instructionHandlerLoop();\n            }\n        ,this.state.speed)});\n    }\n\n\n    instructionHandlerLoop() {\n        if(this.state.instructions[this.state.instruction] === \"end\") {\n            clearInterval(this.state.intervalID);\n            this.setState({instruction: this.state.instructions.length - 1, isSorting: false, finishedSorting: true})\n        } else {\n            if(this.state.instructions[this.state.instruction].startsWith(\"movepointer\")) {\n                let arr = [...this.state.array];\n                let ptrs = { \"a\": this.state.pointerA, \"b\": this.state.pointerB};\n                let i = this.state.instruction;\n                \n                while(this.state.instructions[i].startsWith(\"movepointer\")) {\n                    let c = instructionHandler(this.state.instructions[i], arr, ptrs);\n                    arr = c[0];\n                    ptrs = c[1];\n                    i++;\n                }\n                if(this.state.instructions[i] === \"end\") {\n                    clearInterval(this.state.intervalID);\n                    this.setState({instruction: this.state.instructions.length - 1, isSorting: false, finishedSorting: true})\n                    return;\n                }\n                let c = instructionHandler(this.state.instructions[i], arr, ptrs);\n                arr = c[0];\n                ptrs = c[1];\n                i++;\n                this.setState({array: arr, pointerA: ptrs[\"a\"], pointerB: ptrs[\"b\"], instruction: i});\n            } \n        }\n    }\n\n    goToInstruction = (target) => {\n        let arr = [...this.state.savedArray];\n        let ptrs = {\"a\": 0, \"b\": 0};\n        for(let i = 0; i < target; i++) {\n            let c = instructionHandler(this.state.instructions[i], arr, ptrs);\n            ptrs = c[1];\n            arr = c[0];\n        }\n        this.setState({array: arr, pointerA: ptrs[\"a\"], pointerB: ptrs[\"b\"], instruction: target});\n        if(target !== this.state.arraySize) {\n            this.setState({finishedSorting: false});\n        }\n    }\n\n    goBackOneInstruction = () => {\n        if(this.state.instruction > 0) {\n            this.goToInstruction(this.state.instruction - 1);\n        }\n    }\n\n    goForwardOneInstruction = () => {\n        if(this.state.instruction < this.state.array.length - 1) {\n            this.goToInstruction(this.state.instruction + 1);\n        }\n    }\n\n}\n\nexport default SortingVisualizer;\n","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nfunction App() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <SortingVisualizer />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}